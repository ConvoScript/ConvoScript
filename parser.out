Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    EQUALS
    NEWLINE
    RECEIVE
    SEMI

Grammar

Rule 0     S' -> function
Rule 1     function -> OPEN LPAREN RPAREN
Rule 2     function -> CLOSE LPAREN RPAREN
Rule 3     function -> JOIN LPAREN IP RPAREN
Rule 4     function -> SEND LPAREN data RPAREN
Rule 5     data -> STRING
Rule 6     data -> WORD
Rule 7     data -> INTEGER

Terminals, with rules where they appear

CLOSE                : 2
COMMA                : 
EQUALS               : 
INTEGER              : 7
IP                   : 3
JOIN                 : 3
LPAREN               : 1 2 3 4
NEWLINE              : 
OPEN                 : 1
RECEIVE              : 
RPAREN               : 1 2 3 4
SEMI                 : 
SEND                 : 4
STRING               : 5
WORD                 : 6
error                : 

Nonterminals, with rules where they appear

data                 : 4
function             : 0

Parsing method: LALR

state 0

    (0) S' -> . function
    (1) function -> . OPEN LPAREN RPAREN
    (2) function -> . CLOSE LPAREN RPAREN
    (3) function -> . JOIN LPAREN IP RPAREN
    (4) function -> . SEND LPAREN data RPAREN

    OPEN            shift and go to state 2
    CLOSE           shift and go to state 3
    JOIN            shift and go to state 4
    SEND            shift and go to state 5

    function                       shift and go to state 1

state 1

    (0) S' -> function .



state 2

    (1) function -> OPEN . LPAREN RPAREN

    LPAREN          shift and go to state 6


state 3

    (2) function -> CLOSE . LPAREN RPAREN

    LPAREN          shift and go to state 7


state 4

    (3) function -> JOIN . LPAREN IP RPAREN

    LPAREN          shift and go to state 8


state 5

    (4) function -> SEND . LPAREN data RPAREN

    LPAREN          shift and go to state 9


state 6

    (1) function -> OPEN LPAREN . RPAREN

    RPAREN          shift and go to state 10


state 7

    (2) function -> CLOSE LPAREN . RPAREN

    RPAREN          shift and go to state 11


state 8

    (3) function -> JOIN LPAREN . IP RPAREN

    IP              shift and go to state 12


state 9

    (4) function -> SEND LPAREN . data RPAREN
    (5) data -> . STRING
    (6) data -> . WORD
    (7) data -> . INTEGER

    STRING          shift and go to state 14
    WORD            shift and go to state 15
    INTEGER         shift and go to state 16

    data                           shift and go to state 13

state 10

    (1) function -> OPEN LPAREN RPAREN .

    $end            reduce using rule 1 (function -> OPEN LPAREN RPAREN .)


state 11

    (2) function -> CLOSE LPAREN RPAREN .

    $end            reduce using rule 2 (function -> CLOSE LPAREN RPAREN .)


state 12

    (3) function -> JOIN LPAREN IP . RPAREN

    RPAREN          shift and go to state 17


state 13

    (4) function -> SEND LPAREN data . RPAREN

    RPAREN          shift and go to state 18


state 14

    (5) data -> STRING .

    RPAREN          reduce using rule 5 (data -> STRING .)


state 15

    (6) data -> WORD .

    RPAREN          reduce using rule 6 (data -> WORD .)


state 16

    (7) data -> INTEGER .

    RPAREN          reduce using rule 7 (data -> INTEGER .)


state 17

    (3) function -> JOIN LPAREN IP RPAREN .

    $end            reduce using rule 3 (function -> JOIN LPAREN IP RPAREN .)


state 18

    (4) function -> SEND LPAREN data RPAREN .

    $end            reduce using rule 4 (function -> SEND LPAREN data RPAREN .)

